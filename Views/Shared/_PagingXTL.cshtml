@* 
    Model:
      - currentPage:int - Trang hiện tại
      - countPages:int - tổng số trang
      - generateUrl:delegate Func<int?, string> trả về URL tương ứng với trang p (1,2,3 ...)
*@

@model App.Models.PagingModel
@{
    int currentPage  = Model.currentpage;
    int countPages   = Model.countpages;
    var generateUrl  = Model.generateUrl;


    
    if (currentPage > countPages) 
      currentPage = countPages;

    if (countPages <= 1) return;
    

    int? preview = null;
    int? next = null;

    if (currentPage > 1)
        preview = currentPage - 1;

    if (currentPage < countPages)
        next = currentPage + 1;

    // Các trang hiện thị trong điều hướng
    List<int> pagesRanges = new List<int>();    

        
    int delta      = 5;             // Số trang mở rộng về mỗi bên trang hiện tại     
    int remain     = delta * 2;     // Số trang hai bên trang hiện tại

    pagesRanges.Add(currentPage);
    // Các trang phát triển về hai bên trang hiện tại
    for (int i = 1; i <= delta; i++)
    {
        if (currentPage + i  <= countPages) {
            pagesRanges.Add(currentPage + i); 
            remain --;
        }
               
        if (currentPage - i >= 1) {
            pagesRanges.Insert(0, currentPage - i);
            remain --;
        }
            
    }    
    // Xử lý thêm vào các trang cho đủ remain 
    //(xảy ra ở đầu mút của khoảng trang không đủ trang chèn  vào)
    if (remain > 0) {
        if (pagesRanges[0] == 1) {
            for (int i = 1; i <= remain; i++)
            {
                if (pagesRanges.Last() + 1 <= countPages) {
                    pagesRanges.Add(pagesRanges.Last() + 1);
                }
            }
        }
        else {
            for (int i = 1; i <= remain; i++)
            {
                if (pagesRanges.First() - 1 > 1) {
                    pagesRanges.Insert(0, pagesRanges.First() - 1);
                }
            }
        }
    }

}

@* PHÁT SINH HTML*@

<ul class="pagination">
    <!-- Previous page link -->
    @if (preview != null)
    {
        <li class="page-item">
            <a class="page-link" href="@generateUrl(preview)"><i class="fas fa-chevron-left"></i></a>
        </li>
    }
    else
    {
        <li class="page-item disabled">
            <a class="page-link" href="@generateUrl(preview)"><i class="fas fa-chevron-left"></i></a>
        </li>
    }
      
    <!-- Numbered page links -->
    @foreach (var pageitem in pagesRanges)
    {
        if (pageitem != currentPage) {
            <li class="page-item">
                <a class="page-link" href="@generateUrl(pageitem)">
                    @pageitem
                </a>
            </li>
        }   
        else 
        {
            <li class="page-item active" aria-current="page">
                <a class="page-link" href="#">@pageitem <span class="sr-only">(current)</span></a>
            </li>
        }
    }


    <!-- Next page link -->
    @if (next != null)
    {
        <li class="page-item">
            <a class="page-link" href="@generateUrl(next)"><i class="fas fa-chevron-right"></i></a>
        </li>
    }
    else 
    {
        <li class="page-item disabled">
            <a class="page-link" href="@generateUrl(next)"><i class="fas fa-chevron-right"></i></a>
        </li>
    }
</ul>
<style>
    .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 8px;
    padding: 20px 0;
}

.page-item .page-link {
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    padding: 0;
    text-align: center;
    line-height: 40px;
    color: #666666;
    background-color: transparent;
    transition: all 0.3s;
}

.page-item.active .page-link {
    background-color: #00b300; /* Màu xanh */
    color: white;
    font-weight: bold;
}

.page-item.disabled .page-link {
    background-color:  #9e9a9a;
    color: gray;
    pointer-events: none;
}

.page-item .page-link:hover {
    background-color: #00b300;
    color:white;
}

.page-item:first-child .page-link,
.page-item:last-child .page-link {
    font-weight: bold;
    font-size: 18px;
    border-radius: 50%;
    background-color: white;
    border: 1px solid #ddd;
}

.sr-only {
    display: none; /* Ẩn span phụ */
}

</style>