@using App.Models
@model IEnumerable<App.Models.Category>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a class="btn btn-primary" asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Slug)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
    await RenderCategory(item, 0);
}
    </tbody>
</table>

@{
    async Task  RenderCategory(Category item, int level){
        string prefix = string.Concat(Enumerable.Repeat("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp",level));
        <tr>
            <td>
                @Html.Raw(prefix)
                <a class="text-decoration-none" asp-action="Edit" asp-route-id="@item.Id">(@level) @Html.DisplayFor(modelItem => item.Title)</a> |
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Slug)
            </td>
            <td>
                
                <a class="text-decoration-none" asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a class="text-decoration-none" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
        if (item.CategoryChildren?.Count > 0){
            foreach (var childCate in item.CategoryChildren){
                await RenderCategory(childCate, level + 1);
            }
        }
    }
}
